server {
	listen 80 default_server;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;

       	root /etc/nginx/conf.d/html;
	index index.html index.htm;
	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
		# Uncomment to enable naxsi on this location
		# include /etc/nginx/naxsi.rules
	}

}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream {{ $host }} {

{{ range $index, $value := $containers }}

{{/* the MAP_VIRTUAL_PORT env var tells us what port to listen on */}}
{{ $mapvport := $value.Env.MAP_VIRTUAL_PORT }}

{{/* figure out what the backend IP and port are, so we know where to proxy to */}}
{{ $backendinfo :=  index $value.Addresses 0 }}
{{ $backendIP := $backendinfo.IP }}
{{ $backendPort := $backendinfo.Port }}
	{{ $addrLen := len $value.Addresses }}
	{{/* If only 1 port exposed, use that */}}
	{{ if eq $addrLen 1 }}
		{{ with $address := index $value.Addresses 0 }}
		   # {{$value.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		{{ end }}

	{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
	{{ else if $value.Env.VIRTUAL_PORT }}
		{{ range $i, $address := $value.Addresses }}
		   {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
		   # {{$value.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		   {{ end }}
		{{ end }}

	{{/* Else default to standard web port 80 */}}
	{{ else }}
		{{ range $i, $address := $value.Addresses }}
			{{ if eq $address.Port "80" }}
			# {{$value.Name}}
			server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{ end }}
	{{ end }}
}

server {
        listen {{ $mapvport }} default_server;
	server_name {{ $host }};
	proxy_buffering off;
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;

        # ssl enabled
        ssl on;
        ssl_certificate /etc/nginx/conf.d/ssl/server.crt;
        ssl_certificate_key /etc/nginx/conf.d/ssl/server.key;
        ssl_session_timeout 5m;
        ssl_ciphers 'AES128+EECDH:AES128+EDH:!aNULL';
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.4.4 8.8.8.8 valid=300s;
        resolver_timeout 10s;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_dhparam /etc/nginx/conf.d/ssl/dhparam.pem;

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        # hardcore security wiould be to disallow X-Frame_Options, but RStudio needs this capability to run
        # add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

	location / {
		proxy_pass http://{{ $backendIP }}:{{ $backendPort }}/;
                # settings to allow big file uploads
                client_max_body_size 100M;
                proxy_read_timeout 1200;
                #
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;

		# HTTP 1.1 support
		proxy_http_version 1.1;
		proxy_set_header Connection "";
	}
}
{{ end }}
{{ end }}
